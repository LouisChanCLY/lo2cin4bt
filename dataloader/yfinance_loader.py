"""
yfinance_loader.py

„ÄêÂäüËÉΩË™™Êòé„Äë
------------------------------------------------------------
Êú¨Ê®°ÁµÑÁÇ∫ Lo2cin4BT Êï∏ÊìöËºâÂÖ•Âô®ÔºåË≤†Ë≤¨ÈÄ£Êé• Yahoo Finance API ‰∏ãËºâË°åÊÉÖÊï∏ÊìöÔºåÊîØÊè¥Â§öÁ®ÆÈ†ªÁéá„ÄÅË≥áÊñôÊ¨Ñ‰ΩçËá™ÂãïÊ®ôÊ∫ñÂåñÔºå‰∏¶Á¢∫‰øùÊï∏ÊìöÁµêÊßãËàá‰∏ãÊ∏∏Ê®°ÁµÑ‰∏ÄËá¥„ÄÇ

„ÄêÊµÅÁ®ãËàáÊï∏ÊìöÊµÅ„Äë
------------------------------------------------------------
- Áî± DataLoader Êàñ DataImporter Ë™øÁî®Ôºå‰ΩúÁÇ∫Ë°åÊÉÖÊï∏Êìö‰æÜÊ∫ê‰πã‰∏Ä
- ‰∏ãËºâÊï∏ÊìöÂæåÂÇ≥ÈÅûÁµ¶ DataValidator„ÄÅReturnCalculator„ÄÅBacktestEngine Á≠âÊ®°ÁµÑ

```mermaid
flowchart TD
    A[DataLoader/DataImporter] -->|ÈÅ∏Êìá Yahoo Finance| B(yfinance_loader)
    B -->|‰∏ãËºâÊï∏Êìö| C[DataValidator]
    C -->|È©óË≠âÊ∏ÖÊ¥ó| D[ReturnCalculator]
    D -->|Ë®àÁÆóÊî∂ÁõäÁéá| E[BacktestEngine/‰∏ãÊ∏∏Ê®°ÁµÑ]
```

„ÄêÁ∂≠Ë≠∑ËàáÊì¥ÂÖÖÈáçÈªû„Äë
------------------------------------------------------------
- Êñ∞Â¢û/‰øÆÊîπÊîØÊè¥È†ªÁéá„ÄÅÊ¨Ñ‰ΩçÊôÇÔºåË´ãÂêåÊ≠•Êõ¥Êñ∞È†ÇÈÉ®Ë®ªËß£Ëàá‰∏ãÊ∏∏ÊµÅÁ®ã
- Ëã• yfinance API ‰ªãÈù¢ÊúâËÆäÂãïÔºåÈúÄÂêåÊ≠•Êõ¥Êñ∞Êú¨Ê™îÊ°àËàá base_loader
- Ê¨Ñ‰ΩçÊ®ôÊ∫ñÂåñ„ÄÅË≥áÊñôÊ∏ÖÊ¥óÈÇèËºØÂ¶ÇÊúâË™øÊï¥ÔºåË´ãÂêåÊ≠•ÈÄöÁü•Âçî‰ΩúËÄÖ

„ÄêÂ∏∏Ë¶ãÊòìÈåØÈªû„Äë
------------------------------------------------------------
- ËÇ°Á•®‰ª£Á¢ºÊàñÊó•ÊúüÁØÑÂúçÈåØË™§ÊúÉÂ∞éËá¥‰∏ãËºâÂ§±Êïó
- Ê¨Ñ‰ΩçÁº∫Â§±ÊàñÂûãÊÖãÈåØË™§ÊúÉÂΩ±Èüø‰∏ãÊ∏∏È©óË≠âËàáË®àÁÆó
- Â§öÁ¥öÁ¥¢ÂºïÊú™Ê≠£Á¢∫Â±ïÂπ≥ÊúÉÂ∞éËá¥Ë≥áÊñôÁµêÊßãÁï∞Â∏∏

„ÄêÁØÑ‰æã„Äë
------------------------------------------------------------
- loader = YahooFinanceLoader()
  df = loader.load()
- ÂèØÊñº DataLoader ‰∫íÂãïÂºèÈÅ∏Êìá Yahoo Finance ‰ΩúÁÇ∫Ë°åÊÉÖ‰æÜÊ∫ê

„ÄêËàáÂÖ∂‰ªñÊ®°ÁµÑÁöÑÈóúËÅØ„Äë
------------------------------------------------------------
- Áî± DataLoader/DataImporter Ë™øÁî®ÔºåÊï∏ÊìöÂÇ≥ÈÅûÁµ¶ DataValidator„ÄÅReturnCalculator„ÄÅBacktestEngine
- ÈúÄËàá base_loader ‰ªãÈù¢‰øùÊåÅ‰∏ÄËá¥

„ÄêÂèÉËÄÉ„Äë
------------------------------------------------------------
- yfinance ÂÆòÊñπÊñá‰ª∂
- base_loader.py„ÄÅDataValidator„ÄÅReturnCalculator
- Â∞àÊ°à README
"""

import io
import sys
from datetime import datetime
from typing import Optional, Tuple

import pandas as pd
import yfinance as yf
from rich.console import Console
from rich.panel import Panel

from dataloader.validator_loader import print_dataframe_table

console = Console()


class YahooFinanceLoader:
    def load(self) -> Tuple[Optional[pd.DataFrame], str]:
        """Âæû Yahoo Finance ËºâÂÖ•Êï∏ÊìöÔºåÂèÉËÄÉ vectorbt ÁöÑÊ®ôÊ∫ñÂåñËôïÁêÜ"""

        # Get user inputs
        ticker = self._get_ticker()
        frequency = self._get_frequency()
        start_date, end_date = self._get_date_range()

        try:
            # Download data from Yahoo Finance
            data, error_msg = self._download_data(ticker, start_date, end_date)
            if data is None:
                return None, frequency

            # Print raw data structure for diagnosis
            print_dataframe_table(data.head(), title="ÂéüÂßãÊï∏ÊìöÈ†êË¶ΩÔºàÂâç5Ë°åÔºâ")

            # Process data structure
            data = self._process_data_structure(data)
            if data is None:
                return None, frequency

            # Standardize column names
            data = self._standardize_columns(data)

            # Check and add required columns
            data = self._ensure_required_columns(data)

            # Validate and convert numeric columns
            data = self._convert_numeric_columns(data)

            # Check and remove invalid rows
            data = self._remove_invalid_rows(data, ticker)

            # Final validation
            if not isinstance(data, pd.DataFrame) or data.empty:
                self._show_error(f"'{ticker}' Êï∏ÊìöÂú®Ê∏ÖÊ¥óÂæåÁÇ∫Á©∫")
                return None, frequency

            self._show_success(
                f"Âæû Yahoo Finance ËºâÂÖ• '{ticker}' ÊàêÂäüÔºåË°åÊï∏Ôºö{len(data)}"
            )
            return data, frequency

        except Exception as e:
            self._show_error(f"Yahoo Finance ËºâÂÖ•ÈåØË™§Ôºö{e}")
            return None, frequency

    def _get_ticker(self) -> str:
        """Get ticker symbol from user input"""
        default_ticker = "TSLA"
        console.print(
            "[bold #dbac30]Ë´ãËº∏ÂÖ•ËÇ°Á•®ÊàñÊåáÊï∏‰ª£Á¢ºÔºà‰æãÂ¶Ç TSLAÔºåÈ†êË®≠ TSLAÔºâÔºö[/bold #dbac30]"
        )
        return input().strip() or default_ticker

    def _get_frequency(self) -> str:
        """Get data frequency from user input"""
        console.print(
            "[bold #dbac30]Ëº∏ÂÖ•ÂÉπÊ†ºÊï∏ÊìöÁöÑÂë®Êúü (‰æãÂ¶Ç 1d ‰ª£ÊõøÊó•Á∑öÔºå1h ‰ª£Ë°® 1Â∞èÊôÇÁ∑öÔºåÈ†êË®≠ 1d)Ôºö[/bold #dbac30]"
        )
        return input().strip() or "1d"

    def _get_date_range(self) -> Tuple[str, str]:
        """Get date range from user input"""
        default_start = "2020-01-01"
        default_end = datetime.now().strftime("%Y-%m-%d")
        console.print(
            f"[bold #dbac30]Ë´ãËº∏ÂÖ•ÈñãÂßãÊó•ÊúüÔºà‰æãÂ¶Ç 2020-01-01ÔºåÈ†êË®≠ {default_start}ÔºâÔºö[/bold #dbac30]"
        )
        start_date = input().strip() or default_start
        console.print(
            f"[bold #dbac30]Ë´ãËº∏ÂÖ•ÁµêÊùüÊó•ÊúüÔºà‰æãÂ¶Ç 2024-12-31ÔºåÈ†êË®≠ {default_end}ÔºâÔºö[/bold #dbac30]"
        )
        end_date = input().strip() or default_end
        return start_date, end_date

    def _download_data(
        self, ticker: str, start_date: str, end_date: str
    ) -> Tuple[Optional[pd.DataFrame], str]:
        """Download data from Yahoo Finance API"""
        # Capture yfinance stderr output
        old_stderr = sys.stderr
        sys.stderr = io.StringIO()

        # Download data with vectorbt-like parameters
        data = yf.download(
            ticker,
            start=start_date,
            end=end_date,
            auto_adjust=False,
            progress=False,
        )

        yf_err = sys.stderr.getvalue()
        sys.stderr = old_stderr

        # Add error messages if any
        extra_msg = ""
        if yf_err.strip():
            extra_msg = f"\n[red]{yf_err.strip()}[/red]"

        # Check if data is valid
        if not isinstance(data, pd.DataFrame) or data.empty:
            self._show_error(
                f"ÁÑ°Ê≥ïÁç≤Âèñ '{ticker}' ÁöÑÊï∏ÊìöÔºåÂèØËÉΩËÇ°Á•®‰ª£Á¢ºÁÑ°ÊïàÊàñÊó•ÊúüÁØÑÂúçÈåØË™§„ÄÇ{extra_msg}"
            )
            return None, ""

        return data, extra_msg

    def _process_data_structure(self, data: pd.DataFrame) -> Optional[pd.DataFrame]:
        """Process and flatten data structure"""
        if isinstance(data, pd.Series):
            # Single ticker returns Series, convert to DataFrame
            return pd.DataFrame({"Close": data}).reset_index()
        elif isinstance(data, pd.DataFrame):
            # Flatten multi-level index if exists
            if isinstance(data.columns, pd.MultiIndex):
                # Keep first level column names (Open, High, etc.)
                data.columns = [col[0] for col in data.columns]
            return data.reset_index()
        else:
            self._show_error(f"ÊÑèÂ§ñÁöÑÊï∏ÊìöÂûãÂà• {type(data)}")
            return None

    def _standardize_columns(self, data: pd.DataFrame) -> pd.DataFrame:
        """Standardize column names to capitalized format"""
        col_map = {}
        for col in data.columns:
            col_lower = str(col).lower()
            if col_lower in ["date", "time", "timestamp"]:
                col_map[col] = "Time"
            elif col_lower in ["open", "o"]:
                col_map[col] = "Open"
            elif col_lower in ["high", "h"]:
                col_map[col] = "High"
            elif col_lower in ["low", "l"]:
                col_map[col] = "Low"
            elif col_lower in ["close", "c"]:
                col_map[col] = "Close"
            elif col_lower in ["volume", "vol"]:
                col_map[col] = "Volume"

        return data.rename(columns=col_map)

    def _ensure_required_columns(self, data: pd.DataFrame) -> pd.DataFrame:
        """Ensure all required columns exist"""
        required_cols = ["Time", "Open", "High", "Low", "Close", "Volume"]
        missing_cols = [col for col in required_cols if col not in data.columns]

        if missing_cols:
            console.print(
                Panel(
                    f"‚ö†Ô∏è Áº∫Â∞ëÊ¨Ñ‰Ωç {missing_cols}ÔºåÂ∞áË®≠ÁÇ∫Áº∫Â§±ÂÄº",
                    title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                    border_style="#8f1511",
                )
            )
            for col in missing_cols:
                data[col] = pd.NA

        # Keep only required columns
        return data[required_cols]

    def _convert_numeric_columns(self, data: pd.DataFrame) -> pd.DataFrame:
        """Convert columns to numeric types"""
        for col in ["Open", "High", "Low", "Close", "Volume"]:
            if not isinstance(data[col], pd.Series):
                console.print(
                    Panel(
                        f"‚ö†Ô∏è Ê¨Ñ‰Ωç '{col}' ‰∏çÊòØ SeriesÔºåÂûãÂà•ÁÇ∫ {type(data[col])}ÔºåËΩâÁÇ∫ Series",
                        title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                        border_style="#8f1511",
                    )
                )
                data[col] = pd.Series(data[col], index=data.index)

            try:
                data[col] = pd.to_numeric(data[col], errors="coerce")
            except Exception as e:
                console.print(
                    Panel(
                        f"‚ö†Ô∏è ÁÑ°Ê≥ïËΩâÊèõÊ¨Ñ‰Ωç '{col}' ÁÇ∫Êï∏ÂÄºÔºö{e}",
                        title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                        border_style="#8f1511",
                    )
                )
                data[col] = pd.NA

        return data

    def _remove_invalid_rows(
        self, data: pd.DataFrame, ticker: str
    ) -> Optional[pd.DataFrame]:
        """Remove rows with all NaN values in price columns"""
        if not isinstance(data, pd.DataFrame):
            console.print(
                Panel(
                    "‚ö†Ô∏è data ‰∏çÊòØ DataFrameÔºåË∑≥ÈÅéÁÑ°ÊïàË°åÊ™¢Êü•",
                    title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                    border_style="#8f1511",
                )
            )
            return data

        try:
            invalid_rows = data[["Open", "High", "Low", "Close"]].isna().all(axis=1)

            if not isinstance(invalid_rows, pd.Series):
                console.print(
                    Panel(
                        "‚ö†Ô∏è invalid_rows ‰∏çÊòØ SeriesÔºåË∑≥ÈÅéÁÑ°ÊïàË°åÁßªÈô§",
                        title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                        border_style="#8f1511",
                    )
                )
                return data

            if invalid_rows.any():
                console.print(
                    Panel(
                        f"‚ö†Ô∏è '{ticker}' Êï∏ÊìöÂåÖÂê´ {invalid_rows.sum()} ÂÄãÁÑ°ÊïàË°åÔºåÂ∞áÁßªÈô§",
                        title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                        border_style="#8f1511",
                    )
                )
                data = data[~invalid_rows]

        except Exception as e:
            console.print(
                Panel(
                    f"Ê™¢Êü•ÁÑ°ÊïàË°åÊôÇÂá∫ÈåØÔºö{e}",
                    title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                    border_style="#8f1511",
                )
            )

        return data

    def _show_error(self, message: str) -> None:
        """Display error message in panel"""
        console.print(
            Panel(
                f"‚ùå {message}",
                title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                border_style="#8f1511",
            )
        )

    def _show_success(self, message: str) -> None:
        """Display success message in panel"""
        console.print(
            Panel(
                message,
                title="[bold #8f1511]üìä Êï∏ÊìöËºâÂÖ• Dataloader[/bold #8f1511]",
                border_style="#dbac30",
            )
        )
